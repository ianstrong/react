{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\react\\\\pokedex\\\\pages\\\\_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import App from 'next/app'\nimport { useEffect } from \"react\";\nimport Navbar from \"../components/navbar\";\nimport NProgress from \"nprogress\";\nimport Router from \"next/router\";\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  console.log(pageProps);\n  useEffect(function () {\n    NProgress.configure({\n      showSpinner: false\n    });\n\n    Router.onRouteChangeStart = function (url) {\n      // Show NProgress animation...\n      console.log(url);\n      NProgress.start();\n    }; // Remove animation on route complete/error\n\n\n    Router.onRouteChangeComplete = function () {\n      return NProgress.done();\n    };\n\n    Router.onRouteChangeError = function () {\n      return NProgress.done();\n    };\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), __jsx(Component, _extends({}, pageProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default MyApp;","map":{"version":3,"sources":["C:/react/pokedex/pages/_app.js"],"names":["useEffect","Navbar","NProgress","Router","MyApp","Component","pageProps","console","log","configure","showSpinner","onRouteChangeStart","url","start","onRouteChangeComplete","done","onRouteChangeError"],"mappings":";;;;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AACA,SAASC,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AAEAN,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,SAAS,CAACO,SAAV,CAAoB;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAApB;;AACAP,IAAAA,MAAM,CAACQ,kBAAP,GAA4B,UAAAC,GAAG,EAAI;AACjC;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACAV,MAAAA,SAAS,CAACW,KAAV;AACD,KAJD,CAFc,CAOd;;;AACAV,IAAAA,MAAM,CAACW,qBAAP,GAA+B;AAAA,aAAMZ,SAAS,CAACa,IAAV,EAAN;AAAA,KAA/B;;AACAZ,IAAAA,MAAM,CAACa,kBAAP,GAA4B;AAAA,aAAMd,SAAS,CAACa,IAAV,EAAN;AAAA,KAA5B;AACD,GAVQ,EAUN,EAVM,CAAT;AAYA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,SAAD,eAAeT,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAMD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeF,KAAf","sourcesContent":["// import App from 'next/app'\r\nimport { useEffect } from \"react\";\r\nimport Navbar from \"../components/navbar\";\r\nimport NProgress from \"nprogress\";\r\nimport Router from \"next/router\";\r\nfunction MyApp({ Component, pageProps }) {\r\n  console.log(pageProps);\r\n\r\n  useEffect(() => {\r\n    NProgress.configure({ showSpinner: false });\r\n    Router.onRouteChangeStart = url => {\r\n      // Show NProgress animation...\r\n      console.log(url);\r\n      NProgress.start();\r\n    };\r\n    // Remove animation on route complete/error\r\n    Router.onRouteChangeComplete = () => NProgress.done();\r\n    Router.onRouteChangeError = () => NProgress.done();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar />\r\n      <Component {...pageProps} />\r\n    </div>\r\n  );\r\n}\r\n\r\n// Only uncomment this method if you have blocking data requirements for\r\n// every single page in your application. This disables the ability to\r\n// perform automatic static optimization, causing every page in your app to\r\n// be server-side rendered.\r\n//\r\n// MyApp.getInitialProps = async (appContext) => {\r\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n//   const appProps = await App.getInitialProps(appContext);\r\n//\r\n//   return { ...appProps }\r\n// }\r\n\r\nexport default MyApp;\r\n"]},"metadata":{},"sourceType":"module"}